{
  "name": "LiquidMenu",
  "tagline": "Menu creation Arduino library for LCDs, extends LiquidCrystal.",
  "body": "LiquidMenu\r\n==========\r\n*Menu creation Arduino library for LCDs, extends <a href=\"https://github.com/arduino/Arduino/tree/master/libraries/LiquidCrystal\"> LiquidCrystal</a>.*\r\n\r\n![logo](https://raw.githubusercontent.com/VasilKalchev/LiquidMenu/master/doc/logo.png)\r\n\r\n\r\n**LiquidMenu** extends the Arduino's LiquidCrystal library with the ability to create menus.\r\nIt simplifies the menu creation process by abstracting the elements of a menu into hierarchically organized classes.\r\n\r\n\r\nFeatures\r\n--------\r\n - Intuitive menu organization\r\n - Selectable lines\r\n - Callback functions\r\n\r\n\r\nRequirements\r\n------------\r\n - The Arduino's <a href=\"https://github.com/arduino/Arduino/tree/master/libraries/LiquidCrystal\"> LiquidCrystal</a> library.\r\n - LCD supported by <a href=\"https://github.com/arduino/Arduino/tree/master/libraries/LiquidCrystal\"> LiquidCrystal</a> (*with Hitachi HD44780 or a compatible chipset*)\r\n - Arduino board or a compatible microcontroller\r\n - Input device/s is recommended (*buttons, rotary encoder, etc.*)\r\n\r\nHow to use\r\n-----------\r\n### Classes organization\r\nThis library uses hierarchically structured classes to represent the different elements of a menu.\r\n\r\n*Basic class hierarchy diagram:*\r\n\r\n![Basic class hierarchy diagram](https://raw.githubusercontent.com/VasilKalchev/LiquidMenu/master/doc/basic_diagram.png \"Basic class hierarchy diagram\")\r\n\r\n*Click [here](https://raw.githubusercontent.com/VasilKalchev/LiquidMenu/master/doc/diagram.png) for a complete hierarchy diagram.*\r\n\r\nThe **LiquidLine** class represents a **line** of text/variables on the display.\r\n\r\nThe **LiquidScreen** class represents a collection of **lines** that are shown together at the same time on the display (*i.e. \"the current screen\"*).\r\n\r\nThe **LiquidMenu** class combines the **screens** to form a **menu**. It can switch between the them, call attached functions, etc.\r\n \r\nThe **LiquidSystem** is an optional class that combines **menus** to form a **menu system** (*e.g. Main menu, Outputs, Settings, etc.*). It has the same public interface as **LiquidMenu**.\r\n\r\n\r\n### Creating a menu\r\nMenu creation is all about structure. First there are variables/constants that go into the **LiquidLine** objects. Then the **LiquidLine** objects go into the **LiquidScreen** objects. Then **LiquidScreen** objects go into the **LiquidMenu** object/s. And optionally the **LiquidMenu** objects go into the **LiquidSystem** object.\r\nThis structure can be established on object instantiation or later with functions:\r\n\r\n - `LiquidLine::LiquidLine(byte column, byte row, A &variableA, B &variableB...); //takes up to 4 variables`\r\n - `LiquidScreen::LiquidScreen(LiquidLine &liquidLine1, LiquidLine &liquidLine2...); //takes up to 4 lines`\r\n - `LiquidMenu::LiquidMenu(LiquidCrystal &liquidCrystal, LiquidScreen &liquidScreen1, LiquidScreen &liquidScreen2..., byte startingScreen = 1); //takes up to 3 screens`\r\n\r\n```c++\r\n/*\r\nThis example demonstrates how to make a menu of 2 screens and 3 lines.\r\n*/\r\n\r\nLiquidCrystal lcd(RS, E, D4, D5, D6, D7);\r\n\r\n// Instantiate a LiquidLine object on column 4, row 0, printing \"Hello\".\r\nLiquidLine line1(4, 0, \"Hello\");\r\nLiquidLine line2(4, 1, \"World\");\r\n// Put the above two lines into a LiquidScreen object.\r\nLiquidScreen screen1(line1, line2);\r\n\r\nint variable1 = 123;\r\n// Instantiate a line with text and variable.\r\nLiquidLine var1_line(0, 0, \"Variable 1: \", variable1);\r\n// This screen will only have one line.\r\nLiquidScreen screen2(var1_line);\r\n\r\n// The menu object takes a reference to the LiquidCrystal object and the screens.\r\nLiquidMenu menu(lcd, screen1, screen2);\r\n\r\n```\r\n\r\n - `LiquidSystem::LiquidSystem(LiquidMenu &liquidMenu1, LiquidMenu &liquidMenu2, byte startingMenu = 1); //takes up to 3 menus`\r\n\r\n```c++\r\n/*\r\nThis example demonstrates how to make a menu system of 3 menus, how to add the\r\nscreens to the menus with functions and how to implement a variable text.\r\n*/\r\n\r\nLiquidCrystal lcd(RS, E, D4, D5, D6, D7);\r\n\r\n// Lines can be used in more than one screen.\r\nLiquidLine back_line(10, 1, \"-BACK\");\r\n\r\n// ---------- MAIN MENU ----------\r\n// For changing text use char*.\r\nchar* name;\r\nLiquidLine hello_line(4, 0, \"Hello\");\r\n// This will print the text that the variable `name` points to.\r\nLiquidLine name_line(4, 1, name);\r\nLiquidScreen welcome_screen(hello_line, name_line);\r\n\r\n// Lines can be used as links to other menus.\r\nLiquidLine other_sLine(0, 0, \"-Other\");\r\nLiquidLine preferences_sLine(0, 1, \"-Preferences\");\r\nLiquidScreen shortcuts_screen(other_line, preferences_line);\r\n\r\nLiquidMenu main_menu(lcd, welcome_screen, shortcuts_screen);\r\n// -------------------------------\r\n\r\n// ---------- OTHER MENU ----------\r\nLiquidLine other_line(0, 0, \"Other menu\");\r\nLiquidScreen other_screen(other_line, back_line);\r\n\r\nLiquidMenu other_menu(lcd, other_screen);\r\n// --------------------------------\r\n\r\n// ---------- PREFERENCES MENU ----------\r\nLiquidLine pref_line1(0, 0, \"Prefs menu\");\r\nLiquidScreen pref_screen(pref_line1, back_line);\r\n\r\n// The screen will be added later.\r\nLiquidMenu pref_menu(lcd);\r\n// --------------------------------------\r\n\r\n\r\n// The menu system takes references to the menus.\r\nLiquidSystem menu_system(main_menu, other_menu, pref_menu);\r\n\r\n\r\nvoid setup() {\r\n    // Change the variable 'name' so the 'welcome' screen prints \"Hello Menu\".\r\n\tname = \"Menu\";\r\n\r\n    // Add a screen to a menu. The same works for the other object types.\r\n\tpref_menu.add_screen(pref_screen);\r\n}\r\n\r\n```\r\n\r\n\r\n### Navigating the menu\r\nThe menu is navigated from the **LiquidMenu** object or if there are multiple menus - the **LiquidSystem** object.\r\n\r\n - `void LiquidMenu::next_screen()` - go to the next screen\r\n - `void LiquidMenu::previous_screen()` - go to the previous screen\r\n - `bool LiquidMenu::change_screen(LiquidScreen &liquidScreen)` - go to a specific screen\r\n\r\n```c++\r\n\r\n/*\r\nThis example demonstrates how to switch to the next/previous screen using some condition.\r\n*/\r\n\r\n...\r\nLiquidMenu menu(lcd, screen1, screen2);\r\n\r\nvoid setup() {\r\n    ...\r\n\tpinMode(rightButton, INPUT);\r\n\tpinMode(leftButton, INPUT);\r\n}\r\n\r\nvoid loop() {\r\n    // Example condition that checks if a button is pressed.\r\n    if (rightButton) {\r\n        menu.next_screen();\r\n    }\r\n    if (leftButton) {\r\n    \tmenu.previous_screen();\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n\r\n### Callback functions\r\n\r\n#### Attaching a function\r\nCallback functions are attached to some **LiquidLine** object (*e.g. `LiquidLine led_line(0, 0, \"LED: \", ledState);`*) with the `LiquidLine::attach_function(byte number, void (*function)(void));` function. There can be up to 8 functions by default and the number identifies them. The second parameter takes a pointer to a `void function()`.\r\n\r\n - `LiquidLine::attach_function(byte number, void (*function)(void));`\r\n\r\n```c++\r\n\r\n/*\r\nThis example demonstrates how to attach a function to some line. The callback\r\nfunction will change a variable and write its value to a pin. It will be\r\nattached to `led_line` under the number 1.\r\n*/\r\n\r\n...\r\nconst byte ledPin = 3;\r\n// We need a variable that holds the state.\r\nbyte ledState = 0;\r\nLiquidLine led_line(0, 0, \"LED: \", ledState);\r\n\r\n/*\r\nCallback functions for changing some state need to change the variable that\r\nis printed on the display and in this case write in to the appropriate pin.\r\n*/\r\nvoid inc_led() {\r\n\tledState += 10;\r\n\tanalogWrite(ledPin, ledState);\r\n}\r\n...\r\n\r\nvoid setup() {\r\n    // The `void inc_led()` function is attached under number 1.\r\n\tled_line.attach_function(1, inc_led);\r\n}\r\n\r\n```\r\n\r\n#### Calling a function\r\nTo call an attached function it needs to be focused (selected) using the `LiquidMenu::switch_focus()` function. When the function is selected, it can be called with `LiquidMenu::call_function(byte functionNumber)`.\r\nSimilar functions should be attached with the same number to the different lines. For example 'incrementing functions' can be attached with the number 1, then with a button press (*button 'UP' preferably*), the focused line's incrementing function will be called.\r\n\r\n - `LiquidMenu::switch_focus();` - switches the focus to the next line\r\n - `LiquidMenu::call_function(byte functionNumber);` - calls the attached function to the focused line under the specified functionNumber)\r\n\r\n```c++\r\n/*\r\nThis example demonstrates how to call an attached function.\r\n*/\r\n...\r\nvoid loop() {\r\n    // We need to be able to move the focus between the lines.\r\n    if (middleButton) {\r\n    \tmenu.switch_focus();\r\n    }\r\n    // If the 'UP' button is pressed - call the function\r\n    // identified as 1 for the focused line.\r\n    if (upButton) {\r\n    \tmenu.call_function(1);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Customizing the focus indicator\r\nThe **focus indicator** on default appears just after the line.\r\nIt can be configured to appear before the line or in a custom absolute position.\r\nIf it appears after the line the symbol used is '<', before the line - '>', in a custom position - the symbol a square. These symbols can be changed individually.\r\n\r\n - `LiquidLine::set_focusPosition(Position position, byte column = 0, byte row = 0);` - `Position` is an enum class that has `RIGHT`, `LEFT` and `CUSTOM` as parameters, if the position is `CUSTOM` then the column and the row needs to be specified\r\n - `LiquidScreen::set_focusPosition(Position position);` - the focus position can be changed for the whole screen at once (*it can't be changed to `CUSTOM` because it needs individual coordinates*)\r\n - `LiquidMenu::set_focusPosition(Position position);` - change the focus position for the whole menu at once\r\n - `LiquidSystem::set_focusPosition(Position position);` - change the focus position for the whole menu system at once\r\n\r\n - `LiquidMenu::set_focusSymbol(Position position, byte symbol[8])` - this changes the focus symbol for a particular position\r\n - `LiquidMenu::set_focusSymbol(Position position, byte symbol[8])` - equivalent (because of the way the symbol is stored)\r\n\r\n```c++\r\n/*\r\nThis example demonstrates how to customize the focus indicator position and appearance.\r\n*/\r\n...\r\n// Indicator symbol definition. Create a new one from [here](http://omerk.github.io/lcdchargen/).\r\nbyte lFocus[8] = {\r\n\t0b00000,\r\n\t0b00000,\r\n\t0b00100,\r\n\t0b01110,\r\n\t0b00100,\r\n\t0b00000,\r\n\t0b00000,\r\n\t0b00000\r\n};\r\n\r\nvoid setup() {\r\n    // Set the focus position for `line1` to `CUSTOM`.\r\n\tline1.set_focusPosition(Position::CUSTOM, 3, 0);\r\n\t// Set the focus position for `screen2` to `LEFT`.\r\n\tscreen2.set_focusPosition(Position::LEFT);\r\n\r\n    // Change the left focus indicator symbol to the specified one.\r\n\tmenu.set_focusSymbol(Position::LEFT, lFocus);\r\n}\r\n\r\n```\r\nMore examples are available [here][].\r\n\r\n\r\nMore information\r\n----------------\r\n[Examples](https://github.com/VasilKalchev/LiquidMenu/doc/html/examples.html)\r\n\r\n[Documentation](https://github.com/VasilKalchev/LiquidMenu/doc/html)\r\n\r\n\r\nLicense\r\n-------\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Vasil Kalchev\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\n\r\n[LC]: https://github.com/arduino/Arduino/tree/master/libraries/LiquidCrystal\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}